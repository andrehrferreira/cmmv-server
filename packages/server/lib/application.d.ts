import * as http from 'node:http';
import * as https from 'node:https';
import * as http2 from 'node:http2';
import * as zlib from 'node:zlib';
import { ServerMiddleware, IServerApplication } from '@cmmv/server-common';
import { ServerStaticMiddleware } from '@cmmv/server-static';
import { Router } from './router';
import { Request } from './request';
import { Response } from './response';
import { ServerOptions } from '../interfaces';
type Socket = http.Server | https.Server | http2.Http2Server | http2.Http2SecureServer;
export declare class ServerApplication implements IServerApplication {
    private isHTTP2;
    socket: Socket;
    private opts;
    private middlewares;
    private middlewaresArr;
    private staticServer;
    private router;
    parent: ServerApplication;
    private scope;
    private namesProtected;
    get locals(): {
        [key: string]: any;
    };
    get settings(): any;
    get param(): (valueOrObject: string | string[], cb: any) => void;
    private _request;
    private _response;
    get request(): any;
    set request(value: any);
    get response(): any;
    set response(value: any);
    constructor(opts?: ServerOptions);
    private onListener;
    handleBody(req: http.IncomingMessage | http2.Http2ServerRequest, res: http.ServerResponse | http2.Http2ServerResponse, next: (req: any, res: any, body: any) => void): Promise<void>;
    decompressBody(body: string, req: any, res: any): Promise<string>;
    decompressData(inputBuffer: Buffer, compressionStream: zlib.Gzip | zlib.Deflate | zlib.BrotliCompress): Promise<string>;
    bindCustomContext(original: any, newScope: any): void;
    private processRequest;
    private runFunctions;
    use(app: ServerMiddleware | Router | ServerStaticMiddleware | Function | string, parent?: ServerApplication): void;
    all(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    get(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): any | null;
    post(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    put(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    delete(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    head(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    patch(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    options(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    set(name: string, value: any): boolean;
    enable(name: string): void;
    enabled(name: string): boolean;
    disable(name: string): void;
    disabled(name: string): boolean;
    render(viewName: string, dataOrCallback: object | Function, callback?: Function): void;
    listen(port: number, hostOrCallback?: string | ((err?: Error) => void), callback?: (err?: Error) => void): Socket;
    close(callback?: (err?: Error) => void): void;
    Router(): new () => Router;
    on(name: string, callback: Function): void;
    emit(name: string, value?: any): void;
}
export declare const CmmvServer: (options?: ServerOptions) => ServerApplication;
export {};
