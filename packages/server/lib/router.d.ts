import { IncomingMessage, ServerResponse } from 'http';
import { Http2ServerRequest, Http2ServerResponse } from 'http2';
import * as FindMyWay from 'find-my-way';
import { Request } from './request';
import { Response } from './response';
import { ServerApplication } from './application';
export declare class Router {
    router: FindMyWay.Instance<FindMyWay.HTTPVersion.V2>;
    params: Map<string, Function>;
    constructor();
    param(valueOrObject: string | string[], cb: any): void;
    isHttp2Request(req: IncomingMessage | Http2ServerRequest): req is Http2ServerRequest;
    all(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    private mergeRoutes;
    get(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    post(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    put(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    delete(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    head(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    patch(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    checkout(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    copy(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    lock(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    merge(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    mkactivity(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    mkcol(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    move(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    'm-search'(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    notify(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    options(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    purge(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    report(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    search(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    subscribe(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    trace(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    unlock(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    unsubscribe(path: string, ...callbacks: Array<(req: Request, res: Response, next?: Function) => void>): void;
    process(socket: ServerApplication, req: IncomingMessage | Http2ServerRequest, res: ServerResponse | Http2ServerResponse, body: any): Promise<{
        request: Request;
        response: Response;
        fn: Array<(req: Request, res: Response, next?: Function) => void>;
        head?: boolean;
    } | null>;
}
